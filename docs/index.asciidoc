:plugin: ldap
:type: filter

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Ldap filter plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

The Ldap filter performs an ldap query on an LDAP server and adds
ldap attributes to the field specified in the `target` option. All attributes
are returned as arrays (see example output) and the attribute names are lowercase.
If more than one entry is matched by the filter query, all attributes are appended
to the array. You can control the maximum number of matches by specifying the `match_first` parameter,
which will only add the attributes from the first x matched entries. This is not recommended because
the order of matches is not predetermined, so the results will not be predictable.
It is better to write a more specific ldap query.

This filter, like all filters, only processes 1 event at a time, so the use
of this plugin can significantly slow down your pipeline's throughput if you
have a high latency network. By way of example, if each LDAP lookup takes 2
milliseconds, the maximum throughput you can achieve with a single filter
worker is 500 events per second (1000 milliseconds / 2 milliseconds).

===== Example

configuration
[source,ruby]
    filter {
      ldap {
        host => "my_ldap_server.example.com"
        port => "389"
        base_dn => "ou=users,dc=example,dc=com"
        ldap_filter => "(uid=%{myUid})"
      }
    }

input event
[source,ruby]
    {
        "@timestamp" => 2018-02-25T10:04:22.338Z,
        "@version" => "1",
        "myUid" => "u501565"
    }

output event
[source,ruby]
    {
        "@timestamp" => 2018-02-25T10:04:22.338Z,
        "@version" => "1",
        "myUid" => "u501565",
        "ldap" => {
            "uid" => [ "u501565" ],
            "givenname" => [ "VALENTIN" ],
            "sn" => [ "BOURDIER" ],
            "memberof" => [ "cn=authors,ou=roles,dc=example,dc=com", "cn=contributors,ou=roles,dc=example,dc=com" ]
        }
    }

[id="plugins-{type}s-{plugin}-options"]
==== Ldap Filter Configuration Options

This plugin supports the following configuration options plus the <<plugins-{type}s-{plugin}-common-options>> described later.

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-ldap_filter>> |<<string,string>>|yes
| <<plugins-{type}s-{plugin}-target>> |<<string,string>>|no
| <<plugins-{type}s-{plugin}-attributes>> |<<array,array>>|no
| <<plugins-{type}s-{plugin}-extract_membership>> |<<boolean,boolean>>|no
| <<plugins-{type}s-{plugin}-escape_sprintf_values>> |<<boolean,boolean>>|no
| <<plugins-{type}s-{plugin}-match_first>> |<<number,number>>|no
| <<plugins-{type}s-{plugin}-host>> |<<string,string>>|yes
| <<plugins-{type}s-{plugin}-ssl>> |<<boolean,boolean>>|no
| <<plugins-{type}s-{plugin}-port>> |<<number,number>>|no
| <<plugins-{type}s-{plugin}-bind_dn>> |<<string,string>>|no
| <<plugins-{type}s-{plugin}-bind_password>> |<<password,password>>|required when `bind_dn` is provided
| <<plugins-{type}s-{plugin}-base_dn>> |<<string,string>>|yes
| <<plugins-{type}s-{plugin}-use_cache>> |<<boolean,boolean>>|no
| <<plugins-{type}s-{plugin}-cache_type>> |<<string,string>>, one of `["memory"]`|no
| <<plugins-{type}s-{plugin}-cache_memory_duration>> |<<number,number>>|no
| <<plugins-{type}s-{plugin}-cache_memory_size>> |<<number,number>>|no
| <<plugins-{type}s-{plugin}-disk_cache_filepath>> |<<path,path>>|no
| <<plugins-{type}s-{plugin}-disk_cache_schedule>> |<<string,string>>|no
| <<plugins-{type}s-{plugin}-include_error_message>> |<<boolean,boolean>>|no
| <<plugins-{type}s-{plugin}-tag_on_failure>> |<<array,array>>|no
|=======================================================================

Also see <<plugins-{type}s-{plugin}-common-options>> for a list of options supported by all
filter plugins.

&nbsp;

[id="plugins-{type}s-{plugin}-ldap_filter"]
===== `ldap_filter`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The LDAP filter query to use. Use sprintf format to make this filter based on event data.
For example: `(mail=%{[user][email]})`

[id="plugins-{type}s-{plugin}-target"]
===== `target`

  * Value type is <<string,string>>
  * Default value is `ldap`

Specify the field into which Logstash should store the ldap data.

[id="plugins-{type}s-{plugin}-attributes"]
===== `attributes`

  * Value type is <<array,array>>
  * There is no default value for this setting

An array of ldap attributes to be included in the event. By default, all ldap attributes are included.
For example `["mail", "uid", "memberOf"]`

[id="plugins-{type}s-{plugin}-extract_membership"]
===== `extract_membership`

  * Value type is <<boolean,boolean>>
  * Default value is `false`

When this is `true`, and the entries returned by the ldap query include a `memberOf` attribute,
an additional `membership` attribute is created. The `membership` attribute includes the simple
names of the groups to which the entry belongs. This only works if the ldap server is configured
to allow **memberOf** results.

[id="plugins-{type}s-{plugin}-escape_sprintf_values"]
===== `escape_sprintf_values`

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Whether or not to escape values in the ldap filter when they are constructed from sprintf format.
For example:
[source,ruby]
    filter {
        ldap {
            ...
            ldap_filter => "cn=%{message}"
        }
    }

[source,ruby]
    {
        "message" => "Nikola*"
    }

  * when `escape_sprintf_values` is `true`, the query sent to the ldap server is `cn=Nikola\2A`
  * when `escape_sprintf_values` is `false`, the query sent to the ldap server is `cn=Nikola*`

[id="plugins-{type}s-{plugin}-match_first"]
===== `match_first`

  * Value type is <<number,number>>
  * There is no default value for this setting.

When this setting is used, only the first x entries matched by the ldap filter will have
their attributes added to the result set.

[id="plugins-{type}s-{plugin}-host"]
===== `host`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The ldap server host.

[id="plugins-{type}s-{plugin}-ssl"]
===== `ssl`

  * Value type is <<boolean,boolean>>
  * Default value is `false`

Whether or not to use an ssl connection to the ldap server.

[id="plugins-{type}s-{plugin}-port"]
===== `port`

  * Value type is <<number,number>>
  * Default value is `389` for non-ssl connections and `636` for ssl connections

The port used to connect to the ldap server.

[id="plugins-{type}s-{plugin}-bind_dn"]
===== `bind_dn`

  * Value type is <<string,string>>
  * There is no default value for this setting

The dn or username to use for ldap querying. The default is to use anonymous authentication.

[id="plugins-{type}s-{plugin}-bind_password"]
===== `bind_password`

  * Value type is <<password,password>>
  * There is no default value for this setting

The password to use with the `bind_dn`. If you have provided a `bind_dn` then you must also provide a password.

[id="plugins-{type}s-{plugin}-base_dn"]
===== `base_dn`

  * Value type is <<string,string>>
  * There is no default value for this setting.

The base ldap search dn. All ldap queries are relative to here.
For example: `"ou=Users,dc=example,dc=com"` will run queries in the Users OU.

[id="plugins-{type}s-{plugin}-use_cache"]
===== `use_cache`

  * Value type is <<boolean,boolean>>
  * Default value is `true`

Whether or not to cache results from the ldap server.

[id="plugins-{type}s-{plugin}-cache_type"]
===== `cache_type`

  * Value can be any of: `memory`
  * Default value is `memory`

How to cache results from the ldap server.

[id="plugins-{type}s-{plugin}-cache_memory_duration"]
===== `cache_memory_duration`

  * Value type is <<number,number>>
  * Default value is `300`

The number of seconds for the memory cache to retain a result.

[id="plugins-{type}s-{plugin}-cache_memory_size"]
===== `cache_memory_size`

  * Value type is <<number,number>>
  * Default value is `20000`

The number of results to cache in memory

[id="plugins-{type}s-{plugin}-disk_cache_filepath"]
===== `disk_cache_filepath`

  * Value type is <<path,path>>
  * There is no default value for this setting.

When this is set, the cache will be periodically persisted to a file.
This can be useful if you want the cache to last past Logstash's lifecycle.

[id="plugins-{type}s-{plugin}-disk_cache_schedule"]
===== `disk_cache_schedule`

  * Value type is <<string,string>>
  * Default value is `10m`

Must be a duration. This is how often the cache should be persisted to the file
specified in `disk_cache_filepath`.

[id="plugins-{type}s-{plugin}-include_error_message"]
===== `include_error_message`

  * Value type is <<boolean,boolean>>
  * Default value is `false`

If this is set and the ldap filter fails, an `error` attribute will be added to the
`target` field containing the ldap error message.

[id="plugins-{type}s-{plugin}-tag_on_failure"]
===== `tag_on_failure`

  * Value type is <<array,array>>
  * Default value is `[ "_ldapfiltererror" ]`

Append values to the `tags` field when the ldap filter encounters an error.

[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]
